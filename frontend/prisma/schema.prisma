// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  INSURER
  MEDICAL
  ADMIN
}

enum InsuranceCardStatus {
  ACTIVE
  INACTIVE
  REVOKED
}

enum PolicyType {
  INDIVIDUAL
  FAMILY
}

model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique
  userType        UserType
  idKeycloak      String
  institutionId   Int?
  isActive        Boolean  @default(true)
  roleId          Int
  role            Role     @relation(fields: [roleId], references: [id])
  insuredPerson   InsuredPerson? @relation(fields: [insuredPersonId], references: [id])
  insuredPersonId Int?     @unique

  // Audit fields from Audit abstract class
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String
  lastModifiedBy  String
  isDeleted       Boolean  @default(false)
}

model Role {
  id         Int     @id @default(autoincrement())
  name       String
  canRead    Boolean
  canWrite   Boolean
  permission String
  users      User[]
}

model Person {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  dateOfBirth  DateTime
  email        String
  phone        String
  address      String
  gender       String
}

model InsuredPerson {
  id                  Int      @id @default(autoincrement())
  // Inherited from Person
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  email               String   @unique
  phone               String
  address             String
  gender              String
  // InsuredPerson specific fields
  cin                 String   @unique
  nif                 String   @unique
  hasDependent        Boolean
  numberOfDependent   Int
  policyEffectiveDate DateTime
  dependents          Dependent[]
  insuranceCards      InsuranceCard[]
  user                User?
  enterpriseId        Int?
  enterprise          Enterprise? @relation(fields: [enterpriseId], references: [id])
}

model Dependent {
  id              Int     @id @default(autoincrement())
  relation        String
  insuredPersonId Int
  insuredPerson   InsuredPerson @relation(fields: [insuredPersonId], references: [id])
}

model Enterprise {
  id Int @id @default(autoincrement())

  // Inherited from Organization
  name              String
  email             String
  phone1            String
  phone2            String?
  address           String
  website           String?
  fiscalNumber      String
  numberOfEmployees Int

  // Inherited from Audit
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String
  lastModifiedBy    String
  isDeleted         Boolean  @default(false)

  insuredPersons InsuredPerson[]
}

model InsuranceCard {
  id                  Int                 @id @default(autoincrement())
  insuredPersonName   String
  policyNumber        BigInt
  cardNumber          String              @unique
  dateOfBirth         DateTime
  policyEffectiveDate DateTime
  hadDependent        Boolean
  status              InsuranceCardStatus
  validUntil          DateTime
  insuranceCompanyId  Int
  insuredPersonId     Int
  insuranceCompany    InsuranceCompany    @relation(fields: [insuranceCompanyId], references: [id])
  insuredPerson       InsuredPerson       @relation(fields: [insuredPersonId], references: [id])
  blockchainReference BlockchainReference?
}

model Policy {
  id                  Int        @id @default(autoincrement())
  policyNumber        BigInt     @unique
  type                PolicyType
  coverage            String
  deductible          Decimal
  premiumAmount       Decimal
  description         String
  validUntil          DateTime
  insuranceCompanyId  Int
  insuranceCompany    InsuranceCompany @relation(fields: [insuranceCompanyId], references: [id])
}

model BlockchainReference {
  id               Int           @id @default(autoincrement())
  reference        BigInt
  cardNumber       String        @unique
  card             InsuranceCard @relation(fields: [cardNumber], references: [cardNumber])
  blockchainTxHash String
  createdAt        DateTime      @default(now())
}

model InsuranceCompany {
  id        Int       @id @default(autoincrement())
  // Inherited from Organization
  name              String
  email             String
  phone1            String
  phone2            String?
  address           String
  website           String?
  fiscalNumber      String
  numberOfEmployees Int

  policies Policy[]
  cards    InsuranceCard[]
}

model MedicalInstitution {
  id    Int    @id @default(autoincrement())
  // Inherited from Organization
  name              String
  email             String
  phone1            String
  phone2            String?
  address           String
  website           String?
  fiscalNumber      String
  numberOfEmployees Int
}
